
Shader "Custom/CompositeDepth" 
{
	Properties 
	{
		_MainTex ("Main Texture", 2D) = "white" { }
		_ZTex ("Depth Buffer", 2D) = "white" { }
		_NormalBuffer ("Normal Buffer", 2D) = "white" { }
		_AOBuffer ("Ambient Occlusion Buffer", 2D) = "white" { }
		_EdgeBuffer ("Edge Buffer", 2D) = "white" { }
		_ProjectedNormalBuffer ("ProjectedNormalBuffer", 2D) = "white" { }
		//_AlphaValue("Alpha Value", Range(0, 1)) = 0.75
		//_NormRange("Normal Search Range", Float) = 2.0			
		//_backgroundColor ("Background Color", Color) = (0, 0, 0, 0)		
	}

	SubShader 
	{
		Pass 
		{		
			CGPROGRAM
            #pragma target 3.0
			#pragma vertex vert
			#pragma fragment frag			
			#include "UnityCG.cginc"
			
			sampler2D _MainTex;		// origin
			sampler2D _ZTex;
			sampler2D _NormalBuffer;
			sampler2D _AOBuffer;
			sampler2D _EdgeBuffer;
			sampler2D _ProjectedNormalBuffer;
			//float _AlphaValue;		// actual alpha
			//float _NormRange;
			//float4 _backgroundColor;
			float4 _MainTex_ST;
			
			struct v2f 
			{
				float4  pos : SV_POSITION;
				float2  uv : TEXCOORD0;
			};

			
			v2f vert (appdata_base v)
			{
				v2f o;
                o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);
                return o;
			}
			
			float4 frag (v2f i) : COLOR 
			{				
                float4 col1 = tex2D(_MainTex, float2(i.uv.x, i.uv.y));		
				float4 col2 = tex2D(_ZTex, float2(i.uv.x, i.uv.y));
				float4 col3 = tex2D(_NormalBuffer, float2(i.uv.x, i.uv.y));
				float4 col4 = tex2D(_AOBuffer, float2(i.uv.x, i.uv.y));
				float4 col5 = tex2D(_EdgeBuffer, float2(i.uv.x, i.uv.y));
				float4 col6 = tex2D(_ProjectedNormalBuffer, float2(i.uv.x, i.uv.y));
				
				float prevAlpha = col1[3];
				float a = col2[3];
				
				if(a > 0.0)
				{
					//col1 = float4(0.0, 0.0, 0.0, prevAlpha);
					col1 = float4(col6[0], col6[1], col6[2], prevAlpha);
					//col1 = float4(col5[3], col5[3], col5[3], prevAlpha);				
					//col1 = float4(col4[3], col4[3], col4[3], prevAlpha);					
					//col1 = float4(col3[2], col3[1], col3[0], prevAlpha);
					//col1 = float4(col2[3], col2[3], col2[3], prevAlpha);
					
					//toon
					/*col1 = float4(col4[3], col4[3], col4[3], prevAlpha);
					if(col5[3] == 0.0)
					{
						col1 = float4(col5[3], col5[3], col5[3], prevAlpha);	
					}*/
				}
				
				return col1;
			}
			
			ENDCG
		}
		
		
		// ---------- COLOR DOT NORMAL ----------
		Pass 
		{		
			CGPROGRAM
            //#pragma target 3.0
			#pragma vertex vert
			#pragma fragment frag			
			#include "UnityCG.cginc"
			
			sampler2D _MainTex;
			sampler2D _ZTex;
			sampler2D _ProjectedNormalBuffer;
			float4 _MainTex_ST;
			
			struct v2f 
			{
				float4  pos : SV_POSITION;
				float2  uv : TEXCOORD0;
			};

			
			v2f vert (appdata_base v)
			{
				v2f o;
                o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);
                return o;
			}
			
			float4 frag (v2f i) : COLOR 
			{	
                float4 col1 = tex2D(_MainTex, float2(i.uv.x, i.uv.y));	
				float a = tex2D(_ZTex, float2(i.uv.x, i.uv.y)).z;
				float4 col6 = tex2D(_ProjectedNormalBuffer, float2(i.uv.x, i.uv.y));
				
				//float prevAlpha = col1[3];
				//if(a > 0.0)
				//{
					col1 = float4(col6[0], col6[1], col6[2], 1.0);		
				//}				
				return col1;
				
				//return float4(1.0, 0.0, 0.0, 1.0);
			}
			
			ENDCG
		}
		
	}
	
	Fallback "VertexLit"
}
