

Shader "Custom/SSAO" 
{  
	Properties 
	{
		_MainTex ("Texture", 2D) = "white" { }	
		norm_buffer ("Normal Buffer", 2D) = "white" { }	
		z_buffer ("Z Buffer", 2D) = "white" { }	
		rand_buffer ("Random Texture", 2D) = "white" { }	
		
		random_size ("Random Size", Float) = 64.0
		g_sample_rad ("Sample Radius", Float) = 1.0
		g_intensity ("Intensity", Float) = 1.0
		g_scale ("Scale", Float) = 1.0
		g_bias ("Bias", Float) = 0.01
	}

	SubShader
	{
		Pass 
		{		
			CGPROGRAM
            #pragma target 3.0
			#pragma vertex vert
			#pragma fragment frag			
			#include "UnityCG.cginc"

			sampler2D _MainTex;
			sampler2D norm_buffer;
			sampler2D z_buffer;
			sampler2D rand_buffer;
			float random_size;		// size of random texture
			float g_sample_rad;		// sampling radius
			float g_intensity;		// the ao intensity
			float g_scale;			// scale distance between occludee and occluder
			float g_bias;			// controls the width of occusion cone considered by the occludee
						
			struct v2f 
			{
				float4  pos : SV_POSITION;
				float2  uv : TEXCOORD0;
			};
			
			float4 _MainTex_ST;
			
			v2f vert (appdata_base v)
			{
				v2f o;
                o.pos = mul(UNITY_MATRIX_MVP, v.vertex);
                o.uv = TRANSFORM_TEX(v.texcoord, _MainTex);
                return o;
			}
			
			float getPosition(in float2 uv)
			{
				float4 c = tex2D(z_buffer, uv);
				return c[3];
			}
			
			float3 getNormal(in float2 uv)
			{
				float4 n = tex2D(norm_buffer, uv);
				return float3(n[0], n[1], n[2]);
			
				//return tex2D(norm_buffer, uv).xyz;
			}
			
			float2 getRandom(in float2 uv)
			{
				return normalize(tex2D(rand_buffer, 512.0 * uv / random_size).xy);
			}
			
			
			float doAmbientOcclusion(float2 tcoord, float2 uv, float p, float3 cnorm)
			{
				float z = getPosition(uv + tcoord);
				float3 c1 = float3(float2(0.0), p * 2.0);
				float3 c2 = float3(tcoord, z * 2.0);
				float3 diff = c2 - c1;
				
				float d = length(diff) * g_scale;
				float3 v = normalize(diff);
				
				float f = 0.0;
				if(length(cnorm) == 0.0) f = 1.0;
				
				return f;
				//return length(cnorm);
				//return dot(v, cnorm);
				//return max(float3(0.0), dot(cnorm, v) - g_bias) * (1.0 / (1.0 + d)) * g_intensity;
				
			}
			
			
			float4 frag (v2f i) : COLOR
			{				
				/*
				o.color.rgb = 1.0f;
				const float2 vec[4] = {float2(1,0),float2(-1,0),
									   float2(0,1),float2(0,-1)};

				float3 p = getPosition(i.uv);
				float3 n = getNormal(i.uv);
				float2 rand = getRandom(i.uv);

				float ao = 0.0f;
				float rad = g_sample_rad/p.z;
				
				int iterations = 4;
				for (int j = 0; j < iterations; ++j)
				{
					float2 coord1 = reflect(vec[j],rand)*rad;
					float2 coord2 = float2(coord1.x*0.707 - coord1.y*0.707,
											  coord1.x*0.707 + coord1.y*0.707);
					  
					ao += doAmbientOcclusion(i.uv,coord1*0.25, p, n);
					ao += doAmbientOcclusion(i.uv,coord2*0.5, p, n);
					ao += doAmbientOcclusion(i.uv,coord1*0.75, p, n);
					ao += doAmbientOcclusion(i.uv,coord2, p, n);
				}
				
				ao/=(float)iterations*4.0;				
				*/
			
				/* note: 1.0 / 512.0 = 0.001953125 */
				/*float2 vec[4] = {float2(0.001953125, 0.0),
								 float2(-0.001953125, 0.0),
								 float2(0.0, 0.001953125),
								 float2(0.0, -0.001953125)};*/
				
				/* note: 2.0 / 512.0 = 0.00390625 */
				float2 vec[4] = {float2(0.00390625, 0.0),
								 float2(-0.00390625, 0.0),
								 float2(0.0, 0.00390625),
								 float2(0.0, -0.00390625)};
				
				float p = getPosition(i.uv);
				float n = getNormal(i.uv);
				float2 rand = getRandom(i.uv);
				
				float ao = 0.0f;
				float rad = g_sample_rad/p;
				
				int iterations = 4;
				for (int j = 0; j < iterations; ++j)
				{
					//float2 coord1 = reflect(vec[j],rand) * rad;
					float2 coord1 = vec[j];
					float2 coord2 = float2(coord1.x * 0.7071067811 - coord1.y * 0.7071067811,
										   coord1.x * 0.7071067811 + coord1.y * 0.7071067811);
					/*					   
					ao += doAmbientOcclusion(i.uv, coord1 * 0.25, p, n);
					ao += doAmbientOcclusion(i.uv, coord2 * 0.50, p, n);
					ao += doAmbientOcclusion(i.uv, coord1 * 0.75, p, n);
					ao += doAmbientOcclusion(i.uv, coord2       , p, n);
					*/
					
					ao += doAmbientOcclusion(i.uv, coord1      , p, n);
					ao += doAmbientOcclusion(i.uv, coord2      , p, n);
					ao += doAmbientOcclusion(i.uv, coord1 * 0.5, p, n);
					ao += doAmbientOcclusion(i.uv, coord2 * 0.5, p, n);
				}				
				
				//ao /= (float)iterations*4.0;
				ao /= (float) iterations;
				
				return float4(0.0, 0.0, 0.0, ao);
			}
			
			ENDCG
		}
	}
	
	Fallback "VertexLit"
}
